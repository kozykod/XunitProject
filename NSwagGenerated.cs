//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace XunitProject
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuickbaseClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public QuickbaseClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.quickbase.com/";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Create a table
        /// </summary>
        /// <remarks>
        /// Creates a table in an application.
        /// </remarks>
        /// <param name="appId">The unique identifier of an app</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> CreateTableAsync(string appId, string qB_Realm_Hostname, string user_Agent, string authorization, Generated generated)
        {
            return CreateTableAsync(appId, qB_Realm_Hostname, user_Agent, authorization, generated, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a table
        /// </summary>
        /// <remarks>
        /// Creates a table in an application.
        /// </remarks>
        /// <param name="appId">The unique identifier of an app</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> CreateTableAsync(string appId, string qB_Realm_Hostname, string user_Agent, string authorization, Generated generated, System.Threading.CancellationToken cancellationToken)
        {
            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (qB_Realm_Hostname == null)
                        throw new System.ArgumentNullException("qB_Realm_Hostname");
                    request_.Headers.TryAddWithoutValidation("QB-Realm-Hostname", ConvertToString(qB_Realm_Hostname, System.Globalization.CultureInfo.InvariantCulture));

                    if (user_Agent != null)
                        request_.Headers.TryAddWithoutValidation("User-Agent", ConvertToString(user_Agent, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(generated, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "tables"
                    urlBuilder_.Append("tables");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("appId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get tables for an app
        /// </summary>
        /// <remarks>
        /// Gets a list of all the tables that exist in a specific application. The properties for each table are the same as what is returned in Get table.
        /// </remarks>
        /// <param name="appId">The unique identifier of an app</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetAppTablesAsync(string appId, string qB_Realm_Hostname, string user_Agent, string authorization)
        {
            return GetAppTablesAsync(appId, qB_Realm_Hostname, user_Agent, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tables for an app
        /// </summary>
        /// <remarks>
        /// Gets a list of all the tables that exist in a specific application. The properties for each table are the same as what is returned in Get table.
        /// </remarks>
        /// <param name="appId">The unique identifier of an app</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetAppTablesAsync(string appId, string qB_Realm_Hostname, string user_Agent, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (qB_Realm_Hostname == null)
                        throw new System.ArgumentNullException("qB_Realm_Hostname");
                    request_.Headers.TryAddWithoutValidation("QB-Realm-Hostname", ConvertToString(qB_Realm_Hostname, System.Globalization.CultureInfo.InvariantCulture));

                    if (user_Agent != null)
                        request_.Headers.TryAddWithoutValidation("User-Agent", ConvertToString(user_Agent, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "tables"
                    urlBuilder_.Append("tables");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("appId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get fields for a table
        /// </summary>
        /// <remarks>
        /// Gets the properties for all fields in a specific table. The properties for each field are the same as in Get field.
        /// </remarks>
        /// <param name="tableId">The unique identifier (dbid) of the table.</param>
        /// <param name="includeFieldPerms">Set to 'true' if you'd like to get back the custom permissions for the field(s).</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> GetFieldsAsync(string tableId, bool? includeFieldPerms, string qB_Realm_Hostname, string user_Agent, string authorization)
        {
            return GetFieldsAsync(tableId, includeFieldPerms, qB_Realm_Hostname, user_Agent, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get fields for a table
        /// </summary>
        /// <remarks>
        /// Gets the properties for all fields in a specific table. The properties for each field are the same as in Get field.
        /// </remarks>
        /// <param name="tableId">The unique identifier (dbid) of the table.</param>
        /// <param name="includeFieldPerms">Set to 'true' if you'd like to get back the custom permissions for the field(s).</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> GetFieldsAsync(string tableId, bool? includeFieldPerms, string qB_Realm_Hostname, string user_Agent, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            if (tableId == null)
                throw new System.ArgumentNullException("tableId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (qB_Realm_Hostname == null)
                        throw new System.ArgumentNullException("qB_Realm_Hostname");
                    request_.Headers.TryAddWithoutValidation("QB-Realm-Hostname", ConvertToString(qB_Realm_Hostname, System.Globalization.CultureInfo.InvariantCulture));

                    if (user_Agent != null)
                        request_.Headers.TryAddWithoutValidation("User-Agent", ConvertToString(user_Agent, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "fields"
                    urlBuilder_.Append("fields");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tableId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tableId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (includeFieldPerms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeFieldPerms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeFieldPerms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous2>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a field
        /// </summary>
        /// <remarks>
        /// Creates a field within a table, including the custom permissions of that field.
        /// </remarks>
        /// <param name="tableId">The unique identifier of the table.</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response2> CreateFieldAsync(string tableId, string qB_Realm_Hostname, string user_Agent, string authorization, Generated2 generated)
        {
            return CreateFieldAsync(tableId, qB_Realm_Hostname, user_Agent, authorization, generated, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a field
        /// </summary>
        /// <remarks>
        /// Creates a field within a table, including the custom permissions of that field.
        /// </remarks>
        /// <param name="tableId">The unique identifier of the table.</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response2> CreateFieldAsync(string tableId, string qB_Realm_Hostname, string user_Agent, string authorization, Generated2 generated, System.Threading.CancellationToken cancellationToken)
        {
            if (tableId == null)
                throw new System.ArgumentNullException("tableId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (qB_Realm_Hostname == null)
                        throw new System.ArgumentNullException("qB_Realm_Hostname");
                    request_.Headers.TryAddWithoutValidation("QB-Realm-Hostname", ConvertToString(qB_Realm_Hostname, System.Globalization.CultureInfo.InvariantCulture));

                    if (user_Agent != null)
                        request_.Headers.TryAddWithoutValidation("User-Agent", ConvertToString(user_Agent, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(generated, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "fields"
                    urlBuilder_.Append("fields");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tableId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tableId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete field(s)
        /// </summary>
        /// <remarks>
        /// Deletes one or many fields in a table, based on field id. This will also permanently delete any data or calculations in that field.
        /// </remarks>
        /// <param name="tableId">The unique identifier of the table.</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response3> DeleteFieldsAsync(string tableId, string qB_Realm_Hostname, string user_Agent, string authorization, Generated3 generated)
        {
            return DeleteFieldsAsync(tableId, qB_Realm_Hostname, user_Agent, authorization, generated, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete field(s)
        /// </summary>
        /// <remarks>
        /// Deletes one or many fields in a table, based on field id. This will also permanently delete any data or calculations in that field.
        /// </remarks>
        /// <param name="tableId">The unique identifier of the table.</param>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response3> DeleteFieldsAsync(string tableId, string qB_Realm_Hostname, string user_Agent, string authorization, Generated3 generated, System.Threading.CancellationToken cancellationToken)
        {
            if (tableId == null)
                throw new System.ArgumentNullException("tableId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (qB_Realm_Hostname == null)
                        throw new System.ArgumentNullException("qB_Realm_Hostname");
                    request_.Headers.TryAddWithoutValidation("QB-Realm-Hostname", ConvertToString(qB_Realm_Hostname, System.Globalization.CultureInfo.InvariantCulture));

                    if (user_Agent != null)
                        request_.Headers.TryAddWithoutValidation("User-Agent", ConvertToString(user_Agent, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(generated, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "fields"
                    urlBuilder_.Append("fields");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tableId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tableId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Insert/Update record(s)
        /// </summary>
        /// <remarks>
        /// Insert and/or update record(s) in a table. In this single API call, inserts and updates can be submitted. Update can use the key field on the table, or any other supported unique field. Refer to the [Field types page](../fieldInfo) for more information about how each field type should be formatted. This operation allows for incremental processing of successful records, even when some of the records fail.  
        /// <br/>**Note:** This endpoint supports a maximum payload size of 40MB.
        /// </remarks>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response4> UpsertAsync(string qB_Realm_Hostname, string user_Agent, string authorization, Generated4 generated)
        {
            return UpsertAsync(qB_Realm_Hostname, user_Agent, authorization, generated, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Insert/Update record(s)
        /// </summary>
        /// <remarks>
        /// Insert and/or update record(s) in a table. In this single API call, inserts and updates can be submitted. Update can use the key field on the table, or any other supported unique field. Refer to the [Field types page](../fieldInfo) for more information about how each field type should be formatted. This operation allows for incremental processing of successful records, even when some of the records fail.  
        /// <br/>**Note:** This endpoint supports a maximum payload size of 40MB.
        /// </remarks>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response4> UpsertAsync(string qB_Realm_Hostname, string user_Agent, string authorization, Generated4 generated, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (qB_Realm_Hostname == null)
                        throw new System.ArgumentNullException("qB_Realm_Hostname");
                    request_.Headers.TryAddWithoutValidation("QB-Realm-Hostname", ConvertToString(qB_Realm_Hostname, System.Globalization.CultureInfo.InvariantCulture));

                    if (user_Agent != null)
                        request_.Headers.TryAddWithoutValidation("User-Agent", ConvertToString(user_Agent, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(generated, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "records"
                    urlBuilder_.Append("records");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 207)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response6>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete record(s)
        /// </summary>
        /// <remarks>
        /// Deletes record(s) in a table based on a query. Alternatively, all records in the table can be deleted.
        /// </remarks>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Successful delete records response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response7> DeleteRecordsAsync(string qB_Realm_Hostname, string user_Agent, string authorization, Generated5 generated)
        {
            return DeleteRecordsAsync(qB_Realm_Hostname, user_Agent, authorization, generated, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete record(s)
        /// </summary>
        /// <remarks>
        /// Deletes record(s) in a table based on a query. Alternatively, all records in the table can be deleted.
        /// </remarks>
        /// <param name="qB_Realm_Hostname">Your Quickbase domain, for example demo.quickbase.com</param>
        /// <param name="user_Agent">This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.</param>
        /// <param name="authorization">The Quickbase authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).</param>
        /// <returns>Successful delete records response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response7> DeleteRecordsAsync(string qB_Realm_Hostname, string user_Agent, string authorization, Generated5 generated, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (qB_Realm_Hostname == null)
                        throw new System.ArgumentNullException("qB_Realm_Hostname");
                    request_.Headers.TryAddWithoutValidation("QB-Realm-Hostname", ConvertToString(qB_Realm_Hostname, System.Globalization.CultureInfo.InvariantCulture));

                    if (user_Agent != null)
                        request_.Headers.TryAddWithoutValidation("User-Agent", ConvertToString(user_Agent, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(generated, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "records"
                    urlBuilder_.Append("records");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The example below shows all the properties that can be changed with this request. Additional properties that you can see with the corresponding GET request cannot be set through this API.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Generated
    {
        /// <summary>
        /// The name for the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// The plural noun for records in the table. If this value is not passed the default value is 'Records'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pluralRecordName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PluralRecordName { get; set; }

        /// <summary>
        /// The singular noun for records in the table. If this value is not passed the default value is 'Record'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("singleRecordName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SingleRecordName { get; set; }

        /// <summary>
        /// The description for the table. If this value is not passed the default value is blank.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The example below shows all the properties that can be changed with this request. Additional properties that you can see with the corresponding GET request cannot be set through this API.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Generated2
    {
        /// <summary>
        /// Indicates if the field is being tracked as part of Quickbase Audit Logs. You can only set this property to "true" if the app has audit logs enabled. See Enable data change logs under [Quickbase Audit Logs](https://help.quickbase.com/user-assistance/audit_logs.html). Defaults to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Audited { get; set; }

        /// <summary>
        /// The configured help text shown to users within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldHelp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldHelp { get; set; }

        /// <summary>
        /// Indicates if the field is configured to display in bold in the product. Defaults to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Bold { get; set; }

        /// <summary>
        /// Specific field properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        /// <summary>
        /// Indicates if the field is marked as a default in reports. Defaults to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appearsByDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AppearsByDefault { get; set; }

        /// <summary>
        /// The [field types](https://help.quickbase.com/user-assistance/field_types.html), click on any of the field type links for more info.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Generated2FieldType FieldType { get; set; }

        /// <summary>
        /// Field Permissions for different roles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Permissions> Permissions { get; set; }

        /// <summary>
        /// Whether the field you are adding should appear on forms. Defaults to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addToForms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddToForms { get; set; }

        /// <summary>
        /// The label (name) of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>
        /// Indicates if the field is marked as searchable. Defaults to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("findEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FindEnabled { get; set; }

        /// <summary>
        /// Indicates if the field is configured to not wrap when displayed in the product. Defaults to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noWrap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoWrap { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Generated3
    {
        /// <summary>
        /// List of field ids to be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> FieldIds { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Generated4
    {
        /// <summary>
        /// The table identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string To { get; set; }

        /// <summary>
        /// Record data array, where each record contains key-value mappings of fields to be defined/updated and their values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Data { get; set; }

        /// <summary>
        /// The merge field id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mergeFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MergeFieldId { get; set; }

        /// <summary>
        /// Specify an array of field ids that will return data for any updates or added record. Record ID (FID 3) is always returned if any field ID is requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldsToReturn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> FieldsToReturn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Generated5
    {
        /// <summary>
        /// The unique identifier of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string From { get; set; }

        /// <summary>
        /// The filter to delete records. To delete all records specify a filter that will include all records, for example {3.GT.0} where 3 is the ID of the Record ID field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("where", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Where { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        /// <summary>
        /// The name of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The unique identifier (dbid) of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The automatically-created table alias for the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        /// <summary>
        /// The description of the table, as configured by an application administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The time and date when the table was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created { get; set; }

        /// <summary>
        /// The time and date when the table schema or data was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated { get; set; }

        /// <summary>
        /// The incremental Record ID that will be used when the next record is created, as determined when the API call was ran.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextRecordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NextRecordId { get; set; }

        /// <summary>
        /// The incremental Field ID that will be used when the next field is created, as determined when the API call was ran.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NextFieldId { get; set; }

        /// <summary>
        /// The id of the field that is configured for default sorting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultSortFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultSortFieldId { get; set; }

        /// <summary>
        /// The configuration of the default sort order on the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultSortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResponseDefaultSortOrder? DefaultSortOrder { get; set; }

        /// <summary>
        /// The id of the field that is configured to be the key on this table, which is usually the Quickbase Record ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KeyFieldId { get; set; }

        /// <summary>
        /// The builder-configured singular noun of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("singleRecordName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SingleRecordName { get; set; }

        /// <summary>
        /// The builder-configured plural noun of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pluralRecordName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PluralRecordName { get; set; }

        /// <summary>
        /// The size limit for the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sizeLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SizeLimit { get; set; }

        /// <summary>
        /// The amount of space currently being used by the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spaceUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpaceUsed { get; set; }

        /// <summary>
        /// The amount of space remaining for use by the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spaceRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpaceRemaining { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        /// <summary>
        /// The name of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The unique identifier (dbid) of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The automatically-created table alias for the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        /// <summary>
        /// The description of the table, as configured by an application administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The time and date when the table was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created { get; set; }

        /// <summary>
        /// The time and date when the table schema or data was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated { get; set; }

        /// <summary>
        /// The incremental Record ID that will be used when the next record is created, as determined when the API call was ran.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextRecordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NextRecordId { get; set; }

        /// <summary>
        /// The incremental Field ID that will be used when the next field is created, as determined when the API call was ran.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NextFieldId { get; set; }

        /// <summary>
        /// The id of the field that is configured for default sorting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultSortFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultSortFieldId { get; set; }

        /// <summary>
        /// The configuration of the default sort order on the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultSortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DefaultSortOrder? DefaultSortOrder { get; set; }

        /// <summary>
        /// The id of the field that is configured to be the key on this table, which is usually the Quickbase Record ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KeyFieldId { get; set; }

        /// <summary>
        /// The builder-configured singular noun of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("singleRecordName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SingleRecordName { get; set; }

        /// <summary>
        /// The builder-configured plural noun of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pluralRecordName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PluralRecordName { get; set; }

        /// <summary>
        /// The size limit for the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sizeLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SizeLimit { get; set; }

        /// <summary>
        /// The amount of space currently being used by the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spaceUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpaceUsed { get; set; }

        /// <summary>
        /// The amount of space remaining for use by the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spaceRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpaceRemaining { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous2
    {
        /// <summary>
        /// The id of the field, unique to this table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The type of field, as described [here](https://help.quickbase.com/user-assistance/field_types.html).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldType { get; set; }

        /// <summary>
        /// For derived fields, this will be 'lookup', 'summary', or 'formula', to indicate the type of derived field.  For non-derived fields, this will be blank.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mode { get; set; }

        /// <summary>
        /// The label (name) of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Indicates if the field is configured to not wrap when displayed in the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noWrap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoWrap { get; set; }

        /// <summary>
        /// Indicates if the field is configured to display in bold in the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Bold { get; set; }

        /// <summary>
        /// Indicates if the field is marked required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required { get; set; }

        /// <summary>
        /// Indicates if the field is marked as a default in reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appearsByDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AppearsByDefault { get; set; }

        /// <summary>
        /// Indicates if the field is marked as searchable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("findEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FindEnabled { get; set; }

        /// <summary>
        /// Indicates if the field is marked unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Unique { get; set; }

        /// <summary>
        /// Indicates if the field data will copy when a user copies the record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doesDataCopy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesDataCopy { get; set; }

        /// <summary>
        /// The configured help text shown to users within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldHelp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldHelp { get; set; }

        /// <summary>
        /// Indicates if the field is being tracked as part of Quickbase Audit Logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Audited { get; set; }

        /// <summary>
        /// Additional properties for the field. Please see [Field type details](../fieldInfo) page for more details on the properties for each field type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties2 Properties { get; set; }

        /// <summary>
        /// Field Permissions for different roles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<permissions> Permissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {
        /// <summary>
        /// The id of the field, unique to this table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The type of field, as described [here](https://help.quickbase.com/user-assistance/field_types.html).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldType { get; set; }

        /// <summary>
        /// For derived fields, this will be 'lookup', 'summary', or 'formula', to indicate the type of derived field.  For non-derived fields, this will be blank.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mode { get; set; }

        /// <summary>
        /// The label (name) of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Indicates if the field is configured to not wrap when displayed in the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noWrap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoWrap { get; set; }

        /// <summary>
        /// Indicates if the field is configured to display in bold in the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Bold { get; set; }

        /// <summary>
        /// Indicates if the field is marked required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required { get; set; }

        /// <summary>
        /// Indicates if the field is marked as a default in reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appearsByDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AppearsByDefault { get; set; }

        /// <summary>
        /// Indicates if the field is marked as searchable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("findEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FindEnabled { get; set; }

        /// <summary>
        /// Indicates if the field is marked unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Unique { get; set; }

        /// <summary>
        /// Indicates if the field data will copy when a user copies the record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doesDataCopy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesDataCopy { get; set; }

        /// <summary>
        /// The configured help text shown to users within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldHelp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldHelp { get; set; }

        /// <summary>
        /// Indicates if the field is being tracked as part of Quickbase Audit Logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Audited { get; set; }

        /// <summary>
        /// Additional properties for the field. Please see [Field type details](../fieldInfo) page for more details on the properties for each field type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties3 Properties { get; set; }

        /// <summary>
        /// Field Permissions for different roles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Permissions2> Permissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {
        /// <summary>
        /// List of field ids to were deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedFieldIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> DeletedFieldIds { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        /// <summary>
        /// List of errors found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Errors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A successful response that includes details on the records added, updated or unchanged. In the example below, the table previously had ten records with IDs from 1 through 10. The user posts an upsert that updates the value of record 1 and adds two new records, all successfully.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4
    {
        /// <summary>
        /// Information about created records, updated records, referenced but unchanged records, and records having any errors while being processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metadata Metadata { get; set; }

        /// <summary>
        /// The data that is expected to be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Receiving this status code indicates that some (or all) of the individual records being handled had problems and were not processed successfully. The response will be reported under the 'lineErrors' element and indicate the total number of records processed and the errors that occurred with each record. The record IDs of records created, updated, and referenced but unchanged, will be returned in the 'createdRecordIds', 'updatedRecordIds', and 'unchangedRecordIds' elements respectively.  
    /// <br/>In the example below, a user tries to add three records to a table that previously had ten records with IDs from 1 through 10. The first and third records of the request are valid and create the 11th and 12th records in the table; the second record has a problem that prevents it from being processed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {
        /// <summary>
        /// Information about created records, updated records, referenced but unchanged records, and records having any errors while being processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metadata2 Metadata { get; set; }

        /// <summary>
        /// The data that is expected to be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// There was problem in the format of the request. This prevented the entire request from processing any records. The error response will be in the [standard format](../errors).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6
    {
        /// <summary>
        /// The type of error found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The description for the occurence of the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7
    {
        /// <summary>
        /// The number of records deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberDeleted { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties
    {
        /// <summary>
        /// If someone can @mention users in the rich text field to generate an email notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMentions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMentions { get; set; }

        /// <summary>
        /// The comments entered on the field properties by an administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }

        /// <summary>
        /// Whether this field totals in reports within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doesTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesTotal { get; set; }

        /// <summary>
        /// Whether the link field will auto save.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoSave", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoSave { get; set; }

        /// <summary>
        /// Default user id value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValueLuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultValueLuid { get; set; }

        /// <summary>
        /// Whether phone numbers should be in E.164 standard international format
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useI18NFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseI18NFormat { get; set; }

        /// <summary>
        /// The maximum number of versions configured for a file attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? MaxVersions { get; set; }

        /// <summary>
        /// The format to display time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Format { get; set; }

        /// <summary>
        /// Whether the field should carry its multiple choice fields when copied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carryChoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CarryChoices { get; set; }

        /// <summary>
        /// The maximum number of characters allowed for entry in Quickbase for this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// The configured text value that replaces the URL that users see within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkText { get; set; }

        /// <summary>
        /// The id of the parent composite field, when applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentFieldId { get; set; }

        /// <summary>
        /// Indicates whether to display the timezone within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayTimezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayTimezone { get; set; }

        /// <summary>
        /// Indicates if users can add new choices to a selection list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowNewChoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowNewChoices { get; set; }

        /// <summary>
        /// Indicates if the field value is defaulted today for new records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultToday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultToday { get; set; }

        /// <summary>
        /// The units label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }

        /// <summary>
        /// Indicates which target the URL should open in when a user clicks it within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openTargetIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertiesOpenTargetIn? OpenTargetIn { get; set; }

        /// <summary>
        /// The id of the source field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SourceFieldId { get; set; }

        /// <summary>
        /// Whether this field averages in reports within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doesAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesAverage { get; set; }

        /// <summary>
        /// The formula of the field as configured in Quickbase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formula", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Formula { get; set; }

        /// <summary>
        /// The number of decimal places displayed in the product for this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultCountryCode { get; set; }

        /// <summary>
        /// How to display months.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayMonth { get; set; }

        /// <summary>
        /// Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seeVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SeeVersions { get; set; }

        /// <summary>
        /// The number of lines shown in Quickbase for this text field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumLines { get; set; }

        /// <summary>
        /// The user default type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultKind { get; set; }

        /// <summary>
        /// How the email is displayed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayEmail { get; set; }

        /// <summary>
        /// An alternate user friendly text that can be used to display a link in the browser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoverText { get; set; }

        /// <summary>
        /// The current symbol used when displaying field values within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// The id of the target field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetFieldId { get; set; }

        /// <summary>
        /// The configured option for how users display within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayUser { get; set; }

        /// <summary>
        /// Whether a blank value is treated the same as 0 in calculations within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blankIsZero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BlankIsZero { get; set; }

        /// <summary>
        /// Whether an exact match is required for a report link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Exact { get; set; }

        /// <summary>
        /// Default email domain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultDomain { get; set; }

        /// <summary>
        /// The default value configured for a field when a new record is added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Don't show the URL protocol when showing the URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("abbreviate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Abbreviate { get; set; }

        /// <summary>
        /// The format used for displaying numeric values in the product (decimal, separators, digit group).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberFormat { get; set; }

        /// <summary>
        /// The field's target table name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetTableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetTableName { get; set; }

        /// <summary>
        /// The link text, if empty, the url will be used as link text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appearsAs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppearsAs { get; set; }

        /// <summary>
        /// The field's html input width in the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        /// <summary>
        /// The currency format used when displaying field values within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertiesCurrencyFormat? CurrencyFormat { get; set; }

        /// <summary>
        /// Indicates whether to display the day of the week within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayDayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayDayOfWeek { get; set; }

        /// <summary>
        /// The number of digits before commas display in the product, when applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commaStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommaStart { get; set; }

        /// <summary>
        /// An array of entries that exist for a field that offers choices to the user. Note that these choices refer to the valid values of any records added in the future. You are allowed to remove values from the list of choices even if there are existing records with those values in this field. They will be displayed in red when users look at the data in the browser but there is no other effect. While updating a field with this property, the old choices are removed and replaced by the new choices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("choices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Choices { get; set; }

        /// <summary>
        /// The id of the target table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetTableId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetTableId { get; set; }

        /// <summary>
        /// Whether to display time as relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayRelative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayRelative { get; set; }

        /// <summary>
        /// An array of the fields that make up a composite field (e.g., address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compositeFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> CompositeFields { get; set; }

        /// <summary>
        /// Indicates whether the checkbox values will be shown as text in reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayCheckboxAsText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayCheckboxAsText { get; set; }

        /// <summary>
        /// Indicates whether to display the time, in addition to the date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayTime { get; set; }

        /// <summary>
        /// Version modes for files. Keep all versions vs keep last version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertiesVersionMode? VersionMode { get; set; }

        /// <summary>
        /// The id of the field that is used to snapshot values from, when applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SnapFieldId { get; set; }

        /// <summary>
        /// Indicates whether or not to display time in the 24-hour format within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hours24", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hours24 { get; set; }

        /// <summary>
        /// Whether to sort alphabetically, default sort is by record ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortAlpha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SortAlpha { get; set; }

        /// <summary>
        /// Indicates if the listed entries sort as entered vs alphabetically.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortAsGiven", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SortAsGiven { get; set; }

        /// <summary>
        /// Whether this field has a phone extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasExtension { get; set; }

        /// <summary>
        /// Indicates if the file should open a new window when a user clicks it within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useNewWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseNewWindow { get; set; }

        /// <summary>
        /// Whether this field is append only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appendOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AppendOnly { get; set; }

        /// <summary>
        /// Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayAsLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayAsLink { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Generated2FieldType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"text")]
        Text = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"text-multiple-choice")]
        TextMultipleChoice = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"text-multi-line")]
        TextMultiLine = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"rich-text")]
        RichText = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"numeric")]
        Numeric = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"currency")]
        Currency = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"rating")]
        Rating = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"multitext")]
        Multitext = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"url")]
        Url = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"datetime")]
        Datetime = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"timestamp")]
        Timestamp = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"timeofday")]
        Timeofday = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"checkbox")]
        Checkbox = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"multiuser")]
        Multiuser = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"address")]
        Address = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"phone")]
        Phone = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"file")]
        File = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permissions
    {
        /// <summary>
        /// The role associated with a given permission for the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        /// <summary>
        /// The permission given to the role for this field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionType { get; set; }

        /// <summary>
        /// The Id of the given role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoleId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResponseDefaultSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DefaultSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties2
    {
        /// <summary>
        /// If someone can @mention users in the rich text field to generate an email notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMentions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMentions { get; set; }

        /// <summary>
        /// The comments entered on the field properties by an administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }

        /// <summary>
        /// Whether this field totals in reports within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doesTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesTotal { get; set; }

        /// <summary>
        /// Whether the link field will auto save.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoSave", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoSave { get; set; }

        /// <summary>
        /// Default user id value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValueLuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultValueLuid { get; set; }

        /// <summary>
        /// Whether phone numbers should be in E.164 standard international format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useI18NFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseI18NFormat { get; set; }

        /// <summary>
        /// The maximum number of versions configured for a file attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxVersions { get; set; }

        /// <summary>
        /// Whether the field should carry its multiple choice fields when copied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carryChoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CarryChoices { get; set; }

        /// <summary>
        /// The format to display time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Format { get; set; }

        /// <summary>
        /// The maximum number of characters allowed for entry in Quickbase for this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// The configured text value that replaces the URL that users see within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkText { get; set; }

        /// <summary>
        /// The id of the parent composite field, when applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentFieldId { get; set; }

        /// <summary>
        /// Indicates whether to display the timezone within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayTimezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayTimezone { get; set; }

        /// <summary>
        /// The id of the field that is used to aggregate values from the child, when applicable. This displays 0 if the summary function doesn’t require a field selection (like count).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryTargetFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SummaryTargetFieldId { get; set; }

        /// <summary>
        /// Indicates if users can add new choices to a selection list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowNewChoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowNewChoices { get; set; }

        /// <summary>
        /// The id of the field that is the reference in the relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterChoiceFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MasterChoiceFieldId { get; set; }

        /// <summary>
        /// Indicates if the field value is defaulted today for new records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultToday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultToday { get; set; }

        /// <summary>
        /// The units label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }

        /// <summary>
        /// The id of the field that is the target on the master table for this lookup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupTargetFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupTargetFieldId { get; set; }

        /// <summary>
        /// The summary accumulation function type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryFunction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties2SummaryFunction? SummaryFunction { get; set; }

        /// <summary>
        /// The id of the source field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SourceFieldId { get; set; }

        /// <summary>
        /// The table alias for the master table in the relationship this field is part of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterTableTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MasterTableTag { get; set; }

        /// <summary>
        /// Whether this field averages in reports within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doesAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesAverage { get; set; }

        /// <summary>
        /// The formula of the field as configured in Quickbase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formula", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Formula { get; set; }

        /// <summary>
        /// The number of decimal places displayed in the product for this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultCountryCode { get; set; }

        /// <summary>
        /// Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seeVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SeeVersions { get; set; }

        /// <summary>
        /// How to display months.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayMonth { get; set; }

        /// <summary>
        /// The number of lines shown in Quickbase for this text field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumLines { get; set; }

        /// <summary>
        /// How the email is displayed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayEmail { get; set; }

        /// <summary>
        /// The user default type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultKind { get; set; }

        /// <summary>
        /// An alternate user friendly text that can be used to display a link in the browser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoverText { get; set; }

        /// <summary>
        /// The current symbol used when displaying field values within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// The id of the table that is the master in this relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterChoiceTableId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MasterChoiceTableId { get; set; }

        /// <summary>
        /// The id of the target field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetFieldId { get; set; }

        /// <summary>
        /// The configured option for how users display within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayUser { get; set; }

        /// <summary>
        /// Whether a blank value is treated the same as 0 in calculations within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blankIsZero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BlankIsZero { get; set; }

        /// <summary>
        /// Whether an exact match is required for a report link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Exact { get; set; }

        /// <summary>
        /// The start field id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartField { get; set; }

        /// <summary>
        /// Default email domain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultDomain { get; set; }

        /// <summary>
        /// The default value configured for a field when a new record is added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// List of user choices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("choicesLuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> ChoicesLuid { get; set; }

        /// <summary>
        /// Don't show the URL protocol when showing the URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("abbreviate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Abbreviate { get; set; }

        /// <summary>
        /// The field's xml tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xmlTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XmlTag { get; set; }

        /// <summary>
        /// The field's target table name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetTableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetTableName { get; set; }

        /// <summary>
        /// The format used for displaying numeric values in the product (decimal, separators, digit group).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberFormat { get; set; }

        /// <summary>
        /// The link text, if empty, the url will be used as link text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appearsAs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppearsAs { get; set; }

        /// <summary>
        /// The field's html input width in the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        /// <summary>
        /// The currency format used when displaying field values within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties2CurrencyFormat? CurrencyFormat { get; set; }

        /// <summary>
        /// Indicates if the field is a foreign key (or reference field) in a relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreignKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForeignKey { get; set; }

        /// <summary>
        /// Indicates whether to display the day of the week within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayDayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayDayOfWeek { get; set; }

        /// <summary>
        /// The id of the field that is the reference in the relationship for this summary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryReferenceFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SummaryReferenceFieldId { get; set; }

        /// <summary>
        /// The number of digits before commas display in the product, when applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commaStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommaStart { get; set; }

        /// <summary>
        /// An array of entries that exist for a field that offers choices to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("choices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Choices { get; set; }

        /// <summary>
        /// The id of the target table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetTableId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetTableId { get; set; }

        /// <summary>
        /// Whether to display time as relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayRelative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayRelative { get; set; }

        /// <summary>
        /// An array of the fields that make up a composite field (e.g., address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compositeFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> CompositeFields { get; set; }

        /// <summary>
        /// Indicates whether the checkbox values will be shown as text in reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayCheckboxAsText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayCheckboxAsText { get; set; }

        /// <summary>
        /// Version modes for files. Keep all versions vs keep last version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties2VersionMode? VersionMode { get; set; }

        /// <summary>
        /// Indicates whether to display the time, in addition to the date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayTime { get; set; }

        /// <summary>
        /// The duration field id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("durationField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DurationField { get; set; }

        /// <summary>
        /// The id of the field that is used to snapshot values from, when applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SnapFieldId { get; set; }

        /// <summary>
        /// Indicates whether or not to display time in the 24-hour format within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hours24", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hours24 { get; set; }

        /// <summary>
        /// Whether to sort alphabetically, default sort is by record ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortAlpha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SortAlpha { get; set; }

        /// <summary>
        /// Indicates if the listed entries sort as entered vs alphabetically.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortAsGiven", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SortAsGiven { get; set; }

        /// <summary>
        /// Whether this field has a phone extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasExtension { get; set; }

        /// <summary>
        /// The work week type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkWeek { get; set; }

        /// <summary>
        /// Indicates if the URL should open a new window when a user clicks it within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useNewWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseNewWindow { get; set; }

        /// <summary>
        /// Whether this field is append only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appendOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AppendOnly { get; set; }

        /// <summary>
        /// Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayAsLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayAsLink { get; set; }

        /// <summary>
        /// Whether this field allows html.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowHTML", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowHTML { get; set; }

        /// <summary>
        /// The id of the field that is the reference in the relationship for this lookup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupReferenceFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupReferenceFieldId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class permissions
    {
        /// <summary>
        /// The role associated with a given permission for the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        /// <summary>
        /// The permission given to the role for this field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionType { get; set; }

        /// <summary>
        /// The Id of the given role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoleId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties3
    {
        /// <summary>
        /// If someone can @mention users in the rich text field to generate an email notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMentions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMentions { get; set; }

        /// <summary>
        /// The comments entered on the field properties by an administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }

        /// <summary>
        /// Whether this field totals in reports within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doesTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesTotal { get; set; }

        /// <summary>
        /// Whether the link field will auto save.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoSave", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoSave { get; set; }

        /// <summary>
        /// Default user id value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValueLuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultValueLuid { get; set; }

        /// <summary>
        /// Whether phone numbers should be in E.164 standard international format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useI18NFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseI18NFormat { get; set; }

        /// <summary>
        /// The maximum number of versions configured for a file attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxVersions { get; set; }

        /// <summary>
        /// Whether the field should carry its multiple choice fields when copied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carryChoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CarryChoices { get; set; }

        /// <summary>
        /// The format to display time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Format { get; set; }

        /// <summary>
        /// The maximum number of characters allowed for entry in Quickbase for this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// The configured text value that replaces the URL that users see within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkText { get; set; }

        /// <summary>
        /// The id of the parent composite field, when applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentFieldId { get; set; }

        /// <summary>
        /// Indicates whether to display the timezone within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayTimezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayTimezone { get; set; }

        /// <summary>
        /// The id of the field that is used to aggregate values from the child, when applicable. This displays 0 if the summary function doesn’t require a field selection (like count).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryTargetFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SummaryTargetFieldId { get; set; }

        /// <summary>
        /// Indicates if users can add new choices to a selection list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowNewChoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowNewChoices { get; set; }

        /// <summary>
        /// The id of the field that is the reference in the relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterChoiceFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MasterChoiceFieldId { get; set; }

        /// <summary>
        /// Indicates if the field value is defaulted today for new records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultToday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultToday { get; set; }

        /// <summary>
        /// The units label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }

        /// <summary>
        /// The id of the field that is the target on the master table for this lookup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupTargetFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupTargetFieldId { get; set; }

        /// <summary>
        /// The summary accumulation function type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryFunction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties3SummaryFunction? SummaryFunction { get; set; }

        /// <summary>
        /// The id of the source field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SourceFieldId { get; set; }

        /// <summary>
        /// The table alias for the master table in the relationship this field is part of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterTableTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MasterTableTag { get; set; }

        /// <summary>
        /// Whether this field averages in reports within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doesAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesAverage { get; set; }

        /// <summary>
        /// The formula of the field as configured in Quickbase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formula", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Formula { get; set; }

        /// <summary>
        /// The number of decimal places displayed in the product for this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultCountryCode { get; set; }

        /// <summary>
        /// Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seeVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SeeVersions { get; set; }

        /// <summary>
        /// How to display months.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayMonth { get; set; }

        /// <summary>
        /// The number of lines shown in Quickbase for this text field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumLines { get; set; }

        /// <summary>
        /// How the email is displayed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayEmail { get; set; }

        /// <summary>
        /// The user default type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultKind { get; set; }

        /// <summary>
        /// An alternate user friendly text that can be used to display a link in the browser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoverText { get; set; }

        /// <summary>
        /// The current symbol used when displaying field values within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// The id of the table that is the master in this relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterChoiceTableId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MasterChoiceTableId { get; set; }

        /// <summary>
        /// The id of the target field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TargetFieldId { get; set; }

        /// <summary>
        /// The configured option for how users display within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayUser { get; set; }

        /// <summary>
        /// Whether a blank value is treated the same as 0 in calculations within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blankIsZero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BlankIsZero { get; set; }

        /// <summary>
        /// Whether an exact match is required for a report link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Exact { get; set; }

        /// <summary>
        /// The start field id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartField { get; set; }

        /// <summary>
        /// Default email domain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultDomain { get; set; }

        /// <summary>
        /// The default value configured for a field when a new record is added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// List of user choices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("choicesLuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> ChoicesLuid { get; set; }

        /// <summary>
        /// Don't show the URL protocol when showing the URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("abbreviate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Abbreviate { get; set; }

        /// <summary>
        /// The field's xml tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xmlTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XmlTag { get; set; }

        /// <summary>
        /// The field's target table name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetTableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetTableName { get; set; }

        /// <summary>
        /// The format used for displaying numeric values in the product (decimal, separators, digit group).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberFormat { get; set; }

        /// <summary>
        /// The link text, if empty, the url will be used as link text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appearsAs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppearsAs { get; set; }

        /// <summary>
        /// The field's html input width in the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        /// <summary>
        /// The currency format used when displaying field values within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties3CurrencyFormat? CurrencyFormat { get; set; }

        /// <summary>
        /// Indicates if the field is a foreign key (or reference field) in a relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreignKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForeignKey { get; set; }

        /// <summary>
        /// Indicates whether to display the day of the week within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayDayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayDayOfWeek { get; set; }

        /// <summary>
        /// The id of the field that is the reference in the relationship for this summary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryReferenceFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SummaryReferenceFieldId { get; set; }

        /// <summary>
        /// The number of digits before commas display in the product, when applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commaStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommaStart { get; set; }

        /// <summary>
        /// An array of entries that exist for a field that offers choices to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("choices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Choices { get; set; }

        /// <summary>
        /// The id of the target table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetTableId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetTableId { get; set; }

        /// <summary>
        /// Whether to display time as relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayRelative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayRelative { get; set; }

        /// <summary>
        /// An array of the fields that make up a composite field (e.g., address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compositeFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> CompositeFields { get; set; }

        /// <summary>
        /// Indicates whether the checkbox values will be shown as text in reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayCheckboxAsText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayCheckboxAsText { get; set; }

        /// <summary>
        /// Version modes for files. Keep all versions vs keep last version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties3VersionMode? VersionMode { get; set; }

        /// <summary>
        /// Indicates whether to display the time, in addition to the date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayTime { get; set; }

        /// <summary>
        /// The duration field id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("durationField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DurationField { get; set; }

        /// <summary>
        /// The id of the field that is used to snapshot values from, when applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SnapFieldId { get; set; }

        /// <summary>
        /// Indicates whether or not to display time in the 24-hour format within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hours24", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hours24 { get; set; }

        /// <summary>
        /// Whether to sort alphabetically, default sort is by record ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortAlpha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SortAlpha { get; set; }

        /// <summary>
        /// Indicates if the listed entries sort as entered vs alphabetically.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortAsGiven", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SortAsGiven { get; set; }

        /// <summary>
        /// Whether this field has a phone extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasExtension { get; set; }

        /// <summary>
        /// The work week type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkWeek { get; set; }

        /// <summary>
        /// Indicates if the URL should open a new window when a user clicks it within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useNewWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseNewWindow { get; set; }

        /// <summary>
        /// Whether this field is append only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appendOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AppendOnly { get; set; }

        /// <summary>
        /// Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayAsLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayAsLink { get; set; }

        /// <summary>
        /// Whether this field allows html.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowHTML", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowHTML { get; set; }

        /// <summary>
        /// The id of the field that is the reference in the relationship for this lookup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupReferenceFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupReferenceFieldId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permissions2
    {
        /// <summary>
        /// The role associated with a given permission for the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        /// <summary>
        /// The permission given to the role for this field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionType { get; set; }

        /// <summary>
        /// The Id of the given role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoleId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata
    {
        /// <summary>
        /// Array containing the created record ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdRecordIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> CreatedRecordIds { get; set; }

        /// <summary>
        /// This will only be returned in the case of failed records. It is a collection of errors that occurred when processing the incoming data that resulted in records not being processed. Each object has a key representing the sequence number of the record in the original payload (starting from 1). The value is a list of errors occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object LineErrors { get; set; }

        /// <summary>
        /// Array containing the unchanged record ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unchangedRecordIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> UnchangedRecordIds { get; set; }

        /// <summary>
        /// Array containing the updated record ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedRecordIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> UpdatedRecordIds { get; set; }

        /// <summary>
        /// Number of records processed. Includes successful and failed record updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNumberOfRecordsProcessed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalNumberOfRecordsProcessed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata2
    {
        /// <summary>
        /// Array containing the created record ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdRecordIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> CreatedRecordIds { get; set; }

        /// <summary>
        /// This will only be returned in the case of failed records. It is a collection of errors that occurred when processing the incoming data that resulted in records not being processed. Each object has a key representing the sequence number of the record in the original payload (starting from 1). The value is a list of errors occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object LineErrors { get; set; }

        /// <summary>
        /// Array containing the unchanged record ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unchangedRecordIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> UnchangedRecordIds { get; set; }

        /// <summary>
        /// Array containing the updated record ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedRecordIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> UpdatedRecordIds { get; set; }

        /// <summary>
        /// Number of records processed. Includes successful and failed record updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNumberOfRecordsProcessed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalNumberOfRecordsProcessed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertiesOpenTargetIn
    {

        [System.Runtime.Serialization.EnumMember(Value = @"sameWindow")]
        SameWindow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"newWindow")]
        NewWindow = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"popup")]
        Popup = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertiesCurrencyFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"left")]
        Left = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"right")]
        Right = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"middle")]
        Middle = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertiesVersionMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"keepallversions")]
        Keepallversions = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"keeplastversions")]
        Keeplastversions = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties2SummaryFunction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVG")]
        AVG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUM")]
        SUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MAX")]
        MAX = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MIN")]
        MIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"STD-DEV")]
        STDDEV = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNT")]
        COUNT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"COMBINED-TEXT")]
        COMBINEDTEXT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"COMBINED-USER")]
        COMBINEDUSER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTINCT-COUNT")]
        DISTINCTCOUNT = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties2CurrencyFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"left")]
        Left = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"right")]
        Right = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"middle")]
        Middle = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties2VersionMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"keepallversions")]
        Keepallversions = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"keeplastversions")]
        Keeplastversions = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties3SummaryFunction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVG")]
        AVG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUM")]
        SUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MAX")]
        MAX = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MIN")]
        MIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"STD-DEV")]
        STDDEV = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNT")]
        COUNT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"COMBINED-TEXT")]
        COMBINEDTEXT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"COMBINED-USER")]
        COMBINEDUSER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTINCT-COUNT")]
        DISTINCTCOUNT = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties3CurrencyFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"left")]
        Left = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"right")]
        Right = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"middle")]
        Middle = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties3VersionMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"keepallversions")]
        Keepallversions = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"keeplastversions")]
        Keeplastversions = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625